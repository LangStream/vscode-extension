/* tslint:disable */
/* eslint-disable */
/**
 * Project API
 * Project description API
 *
 * The version of the OpenAPI document: undefined
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApplicationDescription } from '../models';
/**
 * ApplicationsApi - axios parameter creator
 * @export
 */
export const ApplicationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Delete application by name
         * @param {string} tenant
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplication: async (tenant: string, name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('deleteApplication', 'tenant', tenant)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deleteApplication', 'name', name)
            const localVarPath = `/api/applications/{tenant}/{name}`
                .replace(`{${"tenant"}}`, encodeURIComponent(String(tenant)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get an application by name
         * @param {string} tenant
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplication: async (tenant: string, name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('getApplication', 'tenant', tenant)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getApplication', 'name', name)
            const localVarPath = `/api/applications/{tenant}/{name}`
                .replace(`{${"tenant"}}`, encodeURIComponent(String(tenant)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get application logs by name
         * @param {string} tenant
         * @param {string} name
         * @param {Array<string>} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationLogs: async (tenant: string, name: string, filter?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('getApplicationLogs', 'tenant', tenant)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getApplicationLogs', 'name', name)
            const localVarPath = `/api/applications/{tenant}/{name}/logs`
                .replace(`{${"tenant"}}`, encodeURIComponent(String(tenant)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter) {
                localVarQueryParameter['filter'] = filter;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all applications
         * @param {string} tenant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplications: async (tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('getApplications', 'tenant', tenant)
            const localVarPath = `/api/applications/{tenant}`
                .replace(`{${"tenant"}}`, encodeURIComponent(String(tenant)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApplicationsApi - functional programming interface
 * @export
 */
export const ApplicationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApplicationsApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Delete application by name
         * @param {string} tenant
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApplication(tenant: string, name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApplication(tenant, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get an application by name
         * @param {string} tenant
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApplication(tenant: string, name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationDescription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApplication(tenant, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get application logs by name
         * @param {string} tenant
         * @param {string} name
         * @param {Array<string>} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApplicationLogs(tenant: string, name: string, filter?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApplicationLogs(tenant, name, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get all applications
         * @param {string} tenant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApplications(tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApplicationDescription>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApplications(tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ApplicationsApi - factory interface
 * @export
 */
export const ApplicationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApplicationsApiFp(configuration)
    return {
        /**
         *
         * @summary Delete application by name
         * @param {string} tenant
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplication(tenant: string, name: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteApplication(tenant, name, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get an application by name
         * @param {string} tenant
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplication(tenant: string, name: string, options?: any): AxiosPromise<ApplicationDescription> {
            return localVarFp.getApplication(tenant, name, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get application logs by name
         * @param {string} tenant
         * @param {string} name
         * @param {Array<string>} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationLogs(tenant: string, name: string, filter?: Array<string>, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.getApplicationLogs(tenant, name, filter, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all applications
         * @param {string} tenant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplications(tenant: string, options?: any): AxiosPromise<Array<ApplicationDescription>> {
            return localVarFp.getApplications(tenant, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApplicationsApi - object-oriented interface
 * @export
 * @class ApplicationsApi
 * @extends {BaseAPI}
 */
export class ApplicationsApi extends BaseAPI {
    /**
     *
     * @summary Delete application by name
     * @param {string} tenant
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public deleteApplication(tenant: string, name: string, options?: AxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).deleteApplication(tenant, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get an application by name
     * @param {string} tenant
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public getApplication(tenant: string, name: string, options?: AxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).getApplication(tenant, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get application logs by name
     * @param {string} tenant
     * @param {string} name
     * @param {Array<string>} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public getApplicationLogs(tenant: string, name: string, filter?: Array<string>, options?: AxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).getApplicationLogs(tenant, name, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get all applications
     * @param {string} tenant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public getApplications(tenant: string, options?: AxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).getApplications(tenant, options).then((request) => request(this.axios, this.basePath));
    }

}
